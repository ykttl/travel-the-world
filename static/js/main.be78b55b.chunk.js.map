{"version":3,"sources":["keys.js","components/Header.js","components/Action.js","components/Pictures.js","components/ApiMap.js","components/Flag.js","components/WikiInfo.js","components/CountryName.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","flickrAPI","Header","props","react_default","a","createElement","className","Action","onClick","stopRoulette","changeButtonText","stopButtonIsPressed","countryNameOnRoulette","src","Pictures","lib_default","options","transitionDuration","this","flickrPhotos","map","x","Component","ApiMap","position","lat","lon","showMap","Map","center","zoom","TileLayer","attribution","url","Marker","Popup","Flag","countryCode","concat","WikiInfo","wikiError","wikipediaText","CountryName","countryName","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","countryRoulette","randomCountryName","roulette","setTimeout","state","rouletteIsRunning","countryListJSON","Math","floor","random","name","setState","setDataAndCallAPIs","startRouletteAgain","countryData","find","listItem","code","getCountryInfo","getGeocode","getPictures","asyncToGenerator","regenerator_default","mark","_callee","response","JSON","wrap","_context","prev","next","fetch","sent","json","stop","_callee2","filteredJSON","photoArray","_context2","keys","photos","photo","filter","url_h","forEach","push","_callee3","_context3","prevState","components_Header","components_Action","components_CountryName","components_Flag","components_WikiInfo","ApiMap_ApiMap","Pictures_Pictures","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be78b55b.chunk.js","sourcesContent":["module.exports = {\n  flickrAPI: \"b1af19929c990bc1a1b2b9b00bbb65d0\"\n};\n","import React from \"react\";\n\nconst Header = props => {\n  return (\n    <div className=\"header\">\n      <h1>Where should I go?</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Action = props => (\n  <div className=\"action_container\">\n    <button\n      className=\"button\"\n      onClick={() => {\n        props.stopRoulette();\n        props.changeButtonText();\n      }}\n    >\n      {!props.stopButtonIsPressed ? <p>Stop!</p> : <p>Try Again? :D</p>}\n    </button>\n    <h2> {props.countryNameOnRoulette} </h2>\n    {!props.stopButtonIsPressed ? <img src=\"img/chikyuugi.png\" /> : <p />}\n  </div>\n);\n\nexport default Action;\n","import React, { Component } from \"react\";\nimport Masonry from \"react-masonry-component\";\n\nexport default class Pictures extends Component {\n  render() {\n    const options = {\n      transitionDuration: 200\n    };\n    return (\n      <div className=\"pictures\">\n        <Masonry options={options}>\n          {this.props.flickrPhotos &&\n            this.props.flickrPhotos.map(x => <img src={x} className=\"item\" />)}\n        </Masonry>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\n\nexport default class ApiMap extends Component {\n  render() {\n    const position = [this.props.lat, this.props.lon];\n    const zoom = \"3\";\n    return (\n      <div>\n        <p />\n        {this.props.showMap && (\n          <Map center={position} zoom={zoom}>\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <Marker position={position}>\n              <Popup>\n                A pretty CSS3 popup. <br /> Easily customizable.\n              </Popup>\n            </Marker>\n          </Map>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst Flag = props => {\n  let countryCode = props.countryCode;\n  let url = `https://www.countryflags.io/${countryCode}/flat/64.png`;\n  if (!countryCode) {\n    url = \"\";\n  }\n  return (\n    <div className=\"flag\">{props.countryCode ? <img src={url} /> : <p />}</div>\n  );\n};\n\nexport default Flag;\n","import React from \"react\";\n\nconst WikiInfo = props => (\n  <div className=\"wikiText\">\n    {props.wikiError ? (\n      <p>There is no wikipedia info. please try again. </p>\n    ) : (\n      <p>{props.wikipediaText}</p>\n    )}\n  </div>\n);\n\nexport default WikiInfo;\n","import React from \"react\";\n\nconst CountryName = props => (\n  <div className=\"countryName_container\">\n    {props.countryName !== \"\" && <h1>{props.countryName}</h1>}\n  </div>\n);\n\nexport default CountryName;\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Action from \"./Action\";\nimport Pictures from \"./Pictures\";\nimport ApiMap from \"./ApiMap\";\nimport Flag from \"./Flag\";\nimport WikiInfo from \"./WikiInfo\";\nimport CountryName from \"./CountryName\";\nimport countryListJSON from \"../list_of_countries\";\nimport keys from \"../keys\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rouletteIsRunning: true,\n      countryNameOnRoulette: \"\",\n      countryName: \"\",\n      countryCode: \"\",\n      wikipediaText: \"\",\n      stopButtonIsPressed: false,\n      wikiError: false,\n      flickrPhotos: [],\n      showMap: false,\n      lat: \"\",\n      lon: \"\"\n    };\n  }\n  componentDidMount = () => {\n    this.countryRoulette();\n  };\n  // randomly display a country name like a roulette\n  countryRoulette = () => {\n    let randomCountryName = \"\";\n    const roulette = () => {\n      setTimeout(() => {\n        randomCountryName = \"\";\n        if (this.state.rouletteIsRunning === false) {\n          return;\n        }\n        randomCountryName =\n          countryListJSON[Math.floor(Math.random() * 234)].name;\n        this.setState({ countryNameOnRoulette: randomCountryName });\n        roulette();\n      }, 80);\n    };\n    roulette();\n  };\n  stopRoulette = () => {\n    if (this.state.rouletteIsRunning === false) {\n      this.startRouletteAgain();\n      return;\n    }\n    this.setState({\n      rouletteIsRunning: false,\n      countryNameOnRoulette: \"\",\n      stopButtonIsPressed: false\n    });\n    this.setDataAndCallAPIs();\n  };\n  startRouletteAgain = () => {\n    this.setState({\n      // init state\n      rouletteIsRunning: true,\n      countryName: \"\",\n      wikipediaText: \"\",\n      countryCode: \"\",\n      wikiError: false,\n      flickrPhotos: [],\n      showMap: false,\n      lat: \"\",\n      lon: \"\"\n    });\n    this.countryRoulette();\n  };\n  setDataAndCallAPIs = () => {\n    // find data matching to roulette from country list\n    const countryData = countryListJSON.find(\n      listItem => listItem.name === this.state.countryNameOnRoulette\n    );\n    this.setState(\n      {\n        countryName: countryData.name,\n        countryCode: countryData.code\n      },\n      () => {\n        this.getCountryInfo();\n        this.getGeocode();\n        this.getPictures();\n      }\n    );\n  };\n  // wikipedia API\n  getCountryInfo = async () => {\n    const countryName = this.state.countryName;\n    // request the first two sentences of wiki page about the country\n    const response = await fetch(\n      `https://en.wikipedia.org/w/api.php?action=opensearch&origin=*&format=json&search=\"${countryName}\"&limit=2`\n    );\n    const JSON = await response.json();\n    if (JSON[2][0] === \"\" && JSON[2][1] === \"\") {\n      this.setState({\n        wikiError: true,\n        wikipediaText: \"\"\n      });\n    }\n    this.setState({\n      wikipediaText: JSON[2]\n    });\n  };\n  // flickr API\n  getPictures = async () => {\n    const countryName = this.state.countryName;\n    const response = await fetch(\n      `https://api.flickr.com/services/rest?api_key=${\n        keys.flickrAPI\n      }&method=flickr.photos.search&format=json&text=${countryName}&extras=url_h&per_page=20&nojsoncallback=1&content_type=1&sort=interestingness-desc`\n    );\n    const JSON = await response.json();\n    const filteredJSON = JSON.photos.photo.filter(photo => photo.url_h); // remove photo without img URL\n    const photoArray = [];\n    filteredJSON.forEach(photo => photoArray.push(photo.url_h));\n    this.setState({ flickrPhotos: photoArray });\n  };\n  // nominatim API to get longitude and latitude for map\n  getGeocode = async () => {\n    const countryName = this.state.countryName;\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/search/${countryName}?format=json`\n    );\n    const JSON = await response.json();\n    this.setState({ showMap: true, lat: JSON[0].lat, lon: JSON[0].lon });\n  };\n  changeButtonText = () => {\n    this.setState(prevState => ({\n      stopButtonIsPressed: !prevState.stopButtonIsPressed\n    }));\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <Header />\n          <Action\n            countryNameOnRoulette={this.state.countryNameOnRoulette}\n            stopRoulette={this.stopRoulette}\n            stopButtonIsPressed={this.state.stopButtonIsPressed}\n            changeButtonText={this.changeButtonText}\n          />\n          <CountryName countryName={this.state.countryName} />\n          {this.state.stopButtonIsPressed && (\n            <div className=\"box_container\">\n              <div className=\"box_left\">\n                <Flag countryCode={this.state.countryCode} />\n                <WikiInfo\n                  wikipediaText={this.state.wikipediaText}\n                  wikiError={this.state.wikiError}\n                />\n              </div>\n              <div className=\"box_right\">\n                <ApiMap\n                  showMap={this.state.showMap}\n                  lat={this.state.lat}\n                  lon={this.state.lon}\n                />\n              </div>\n            </div>\n          )}\n          <Pictures flickrPhotos={this.state.flickrPhotos} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}